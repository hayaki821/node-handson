{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/hayaki/work/node-pra/node-handson/5.http-server-client/todo-express/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hayaki/work/node-pra/node-handson/5.http-server-client/todo-express/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hayaki/work/node-pra/node-handson/5.http-server-client/todo-express/components/Todos.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// 外部モジュールで公開されたものを利用するためのimport文\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport 'isomorphic-fetch'; // 各ページに関する情報の定義\n\nvar pages = {\n  index: {\n    title: 'すべてのTodo',\n    fetchQuery: ''\n  },\n  active: {\n    title: '未完のTodo',\n    fetchQuery: '?completed=false'\n  },\n  completed: {\n    title: '完了のTodo',\n    fetchQuery: '?completed=true'\n  }\n}; // CSRでページを変えるためのリンク\n\nvar pageLinks = Object.keys(pages).map(function (page, index) {\n  /*#__PURE__*/\n  _jsxDEV(Link, {\n    href: \"/\".concat(page === 'index' ? '' : page),\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      style: {\n        marginRight: 10\n      },\n      children: pages[page].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, _this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, _this);\n}); // Reactコンポーネントを実装し、外部のモジュールで利用可能なようexport文で公開\n\nexport default function Todos(props) {\n  _s();\n\n  var _this2 = this;\n\n  var _pages$props$page = pages[props.page],\n      title = _pages$props$page.title,\n      fetchQuery = _pages$props$page.fetchQuery; // コンポーネントの状態の初期化と、propsの値に応じた更新\n\n  var _useState = useState([]),\n      todos = _useState[0],\n      setTodos = _useState[1];\n\n  useEffect(function () {\n    fetch(\"/api/todos\".concat(fetchQuery)).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!res.ok) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.t1 = setTodos;\n                _context.next = 4;\n                return res.json();\n\n              case 4:\n                _context.t2 = _context.sent;\n                _context.t0 = (0, _context.t1)(_context.t2);\n                _context.next = 13;\n                break;\n\n              case 8:\n                _context.t3 = alert;\n                _context.next = 11;\n                return res.text();\n\n              case 11:\n                _context.t4 = _context.sent;\n                _context.t0 = (0, _context.t3)(_context.t4);\n\n              case 13:\n                return _context.abrupt(\"return\", _context.t0);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }, [props.page]); // このコンポーネント描画がするUIをJSX構文で記述して返す\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(function (_ref2) {\n        var id = _ref2.id,\n            title = _ref2.title,\n            completed = _ref2.completed;\n\n        /*#__PURE__*/\n        _jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: completed ? {\n              textDecoration: 'line-through'\n            } : {},\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, _this2)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, _this2);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: pageLinks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Todos, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/hayaki/work/node-pra/node-handson/5.http-server-client/todo-express/components/Todos.js"],"names":["useEffect","useState","Link","Head","pages","index","title","fetchQuery","active","completed","pageLinks","Object","keys","map","page","marginRight","Todos","props","todos","setTodos","fetch","then","res","ok","json","alert","text","id","textDecoration"],"mappings":"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","sourcesContent":["// 外部モジュールで公開されたものを利用するためのimport文\nimport {useEffect, useState} from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport 'isomorphic-fetch';\n\n// 各ページに関する情報の定義\nconst pages = {\n    index: {title: 'すべてのTodo', fetchQuery: ''},\n    active: {title: '未完のTodo', fetchQuery: '?completed=false'},\n    completed: {title: '完了のTodo', fetchQuery: '?completed=true'}\n};\n\n// CSRでページを変えるためのリンク\nconst pageLinks = Object.keys(pages).map((page, index) => {\n    <Link href={`/${page === 'index' ? '' : page}`} key={index}>\n        <a style={{ marginRight: 10 }}>{pages[page].title}</a>\n    </Link>\n})\n\n// Reactコンポーネントを実装し、外部のモジュールで利用可能なようexport文で公開\nexport default function Todos(props){\n    const {title, fetchQuery} = pages[props.page];\n\n    // コンポーネントの状態の初期化と、propsの値に応じた更新\n    const [todos, setTodos] = useState([]);\n    useEffect(() => {\n        fetch(`/api/todos${fetchQuery}`)\n            .then(async res => res.ok\n                ? setTodos(await res.json())\n                : alert(await res.text())\n            )   \n    }, [props.page])\n\n    // このコンポーネント描画がするUIをJSX構文で記述して返す\n    return (\n        <>\n            <Head>\n                <title>{title}</title>\n            </Head>\n            <h1>{title}</h1>\n            {/* TODO一覧の表示 */}\n            <p>{todos}</p>\n            <ul>\n                \n                {todos.map(({id, title, completed}) => {\n                    <li key={id}>\n                        <span style={completed ? {textDecoration: 'line-through'} : {}}>\n                            {title}\n                        </span>\n                    </li>\n                })}\n            </ul>\n            <div>{pageLinks}</div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}