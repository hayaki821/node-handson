{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hayaki/work/node-pra/node-handson/6.SSE/todo-socket-io/components/Todos.js\";\n// 外部モジュールで公開されたものを利用するためのimport文\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport io from 'socket.io-client'; // 各ページに関する情報の定義\n\nconst pages = {\n  index: {\n    title: 'すべてのTodo'\n  },\n  active: {\n    title: '未完のTodo',\n    completed: false\n  },\n  completed: {\n    title: '完了のTodo',\n    fetchcompletedQuery: true\n  }\n}; // CSRでページを変えるためのリンク\n\nconst pageLinks = Object.keys(pages).map((page, index) => /*#__PURE__*/_jsxDEV(Link, {\n  href: `/${page === 'index' ? '' : page}`,\n  children: /*#__PURE__*/_jsxDEV(\"a\", {\n    style: {\n      marginRight: 10\n    },\n    children: pages[page].title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this)\n}, index, false, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 5\n}, this)); // Reactコンポーネントを実装し、外部のモジュールで利用可能なようexport文で公開\n\nexport default function Todos(props) {\n  const {\n    title,\n    completed\n  } = pages[props.page]; // コンポーネントの状態の初期化と、propsの値に応じた更新\n\n  const {\n    0: todos,\n    1: setTodos\n  } = useState([]); // socketをstateとして保持\n\n  const {\n    0: socket,\n    1: setSocket\n  } = useState([]);\n  useEffect(() => {\n    // socketを生成\n    // /todos名前空間を指定\n    const socket = io('/todos');\n    socket.on('todos', todos => {\n      setTodos(typeof completed === 'undefined' ? todos : todos.filter(todo => todo.completed === completed));\n      setSocket(socket);\n    }); // コンポーネントのクリーンアップ時にsocketをクローズ\n\n    return () => socket.close();\n  }, [props.page]);\n  console.log(todos); // このコンポーネント描画がするUIをJSX構文で記述して返す\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u65B0\\u3057\\u3044TODO\\u3092\\u5165\\u529B\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onKeyPress: e => {\n          // Enterキーが押されたらTodoを登録する\n          const title = e.target.value;\n\n          if (e.key !== 'Enter' || !title) {\n            return;\n          }\n\n          e.target.value = '';\n          socket.emit('createTodo', title);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(({\n        id,\n        title,\n        completed\n      }) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: completed ? {\n            textDecoration: 'line-through'\n          } : {},\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: completed,\n            onChange: e => socket.emit('updateCompleted', id, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), title, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => socket.emit('deleteTodo', id),\n            children: \"\\u524A\\u9664\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: pageLinks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/hayaki/work/node-pra/node-handson/6.SSE/todo-socket-io/components/Todos.js"],"names":["useEffect","useState","Link","Head","io","pages","index","title","active","completed","fetchcompletedQuery","pageLinks","Object","keys","map","page","marginRight","Todos","props","todos","setTodos","socket","setSocket","on","filter","todo","close","console","log","e","target","value","key","emit","id","textDecoration","checked"],"mappings":"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","sourcesContent":["// 外部モジュールで公開されたものを利用するためのimport文\nimport {useEffect, useState} from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\n\n// 各ページに関する情報の定義\nconst pages = {\n    index: {title: 'すべてのTodo'},\n    active: {title: '未完のTodo', completed: false},\n    completed: {title: '完了のTodo', fetchcompletedQuery: true}\n};\n\n// CSRでページを変えるためのリンク\nconst pageLinks = Object.keys(pages).map((page, index) => \n    <Link href={`/${page === 'index' ? '' : page}`} key={index}>\n        <a style={{ marginRight: 10 }}>{pages[page].title}</a>\n    </Link>\n);\n\n// Reactコンポーネントを実装し、外部のモジュールで利用可能なようexport文で公開\nexport default function Todos(props){\n    const {title, completed} = pages[props.page];\n\n    // コンポーネントの状態の初期化と、propsの値に応じた更新\n    const [todos, setTodos] = useState([]);\n    // socketをstateとして保持\n    const [socket, setSocket] = useState([]);\n\n    \n    useEffect(() => {\n        // socketを生成\n        // /todos名前空間を指定\n        const socket = io('/todos');\n        socket.on('todos', todos => {\n            setTodos(\n                typeof completed === 'undefined'\n                ? todos\n                : todos.filter(todo => todo.completed === completed )\n            );\n            setSocket(socket);\n        })\n        // コンポーネントのクリーンアップ時にsocketをクローズ\n        return () => socket.close();\n    }, [props.page]);\n    console.log(todos);\n\n    // このコンポーネント描画がするUIをJSX構文で記述して返す\n    return (\n        <>\n            <Head>\n                <title>{title}</title>\n            </Head>\n            <h1>{title}</h1>\n            <label>\n                新しいTODOを入力\n                <input onKeyPress={e => {\n                    // Enterキーが押されたらTodoを登録する\n                    const title = e.target.value;\n                    if (e.key !== 'Enter' || !title){\n                        return;\n                    }\n                    e.target.value = '';\n                    socket.emit('createTodo', title);\n                }}/>\n            </label>\n            {/* TODO一覧の表示 */}\n            <ul>\n                {todos.map(({id, title, completed}) => \n                    <li key={id}>\n                        <label style={completed ? {textDecoration: 'line-through'} : {}}>\n                        <input \n                            type=\"checkbox\"\n                            checked={completed}\n                            onChange={e => \n                                socket.emit('updateCompleted', id, e.target.checked)\n                            }\n                        />\n                            {title}\n                        <button onClick={() => socket.emit('deleteTodo', id)}>削除</button>\n                        </label>\n                    </li>\n                )}\n            </ul>\n            <div>{pageLinks}</div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}