{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hayaki/work/node-pra/node-handson/6.SSE/todo-socket-io/components/Todos.js\",\n    _s = $RefreshSig$();\n\n// 外部モジュールで公開されたものを利用するためのimport文\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport io from 'socket.io-client'; // 各ページに関する情報の定義\n\nvar pages = {\n  index: {\n    title: 'すべてのTodo'\n  },\n  active: {\n    title: '未完のTodo',\n    completed: false\n  },\n  completed: {\n    title: '完了のTodo',\n    fetchcompletedQuery: true\n  }\n}; // Reactコンポーネントを実装し、外部のモジュールで利用可能なようexport文で公開\n\nexport default function Todos(props) {\n  _s();\n\n  var _this = this;\n\n  var _pages$props$page = pages[props.page],\n      title = _pages$props$page.title,\n      completed = _pages$props$page.completed; // コンポーネントの状態の初期化と、propsの値に応じた更新\n\n  var _useState = useState([]),\n      todos = _useState[0],\n      setTodos = _useState[1]; // socketをstateとして保持\n\n\n  var _useState2 = useState([]),\n      socket = _useState2[0],\n      setSocket = _useState2[1];\n\n  useEffect(function () {\n    // socketを生成\n    // /todos名前空間を指定\n    var socket = io('/todos');\n    socket.on('todos', function (todos) {\n      setTodos(typeof completed === 'undefined' ? todos : todos.filter(function (todo) {\n        return todo.completed === completed;\n      }));\n      setSocket(socket);\n    }); // コンポーネントのクリーンアップ時にsocketをクローズ\n\n    return function () {\n      return socket.close();\n    };\n  }, [props.page]);\n  console.log(todos); // このコンポーネント描画がするUIをJSX構文で記述して返す\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u65B0\\u3057\\u3044TODO\\u3092\\u5165\\u529B\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onKeyPress: function onKeyPress(e) {\n          // Enterキーが押されたらTodoを登録する\n          var title = e.target.value;\n\n          if (e.key !== 'Enter' || !title) {\n            return;\n          }\n\n          e.target.value = '';\n          socket.emit('createTodo', title);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(function (_ref) {\n        var id = _ref.id,\n            title = _ref.title,\n            completed = _ref.completed;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            style: completed ? {\n              textDecoration: 'line-through'\n            } : {},\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: completed,\n              onChange: function onChange(e) {\n                return socket.emit('updateCompleted', id, e.target.checked);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 25\n            }, _this), title, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: function onClick() {\n                return socket.emit('deleteTodo', id);\n              },\n              children: \"\\u524A\\u9664\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, _this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: pageLinks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Todos, \"kXddaA3XfVpuCmykwe2eA3C1YVQ=\");\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/hayaki/work/node-pra/node-handson/6.SSE/todo-socket-io/components/Todos.js"],"names":["useEffect","useState","Link","Head","io","pages","index","title","active","completed","fetchcompletedQuery","Todos","props","page","todos","setTodos","socket","setSocket","on","filter","todo","close","console","log","e","target","value","key","emit","map","id","textDecoration","checked","pageLinks"],"mappings":"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","sourcesContent":["// 外部モジュールで公開されたものを利用するためのimport文\nimport {useEffect, useState} from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\n\n// 各ページに関する情報の定義\nconst pages = {\n    index: {title: 'すべてのTodo'},\n    active: {title: '未完のTodo', completed: false},\n    completed: {title: '完了のTodo', fetchcompletedQuery: true}\n};\n\n// Reactコンポーネントを実装し、外部のモジュールで利用可能なようexport文で公開\nexport default function Todos(props){\n    const {title, completed} = pages[props.page];\n\n    // コンポーネントの状態の初期化と、propsの値に応じた更新\n    const [todos, setTodos] = useState([]);\n    // socketをstateとして保持\n    const [socket, setSocket] = useState([]);\n\n    \n    useEffect(() => {\n        // socketを生成\n        // /todos名前空間を指定\n        const socket = io('/todos');\n        socket.on('todos', todos => {\n            setTodos(\n                typeof completed === 'undefined'\n                ? todos\n                : todos.filter(todo => todo.completed === completed )\n            );\n            setSocket(socket);\n        })\n        // コンポーネントのクリーンアップ時にsocketをクローズ\n        return () => socket.close();\n    }, [props.page]);\n    console.log(todos);\n\n    // このコンポーネント描画がするUIをJSX構文で記述して返す\n    return (\n        <>\n            <Head>\n                <title>{title}</title>\n            </Head>\n            <h1>{title}</h1>\n            <label>\n                新しいTODOを入力\n                <input onKeyPress={e => {\n                    // Enterキーが押されたらTodoを登録する\n                    const title = e.target.value;\n                    if (e.key !== 'Enter' || !title){\n                        return;\n                    }\n                    e.target.value = '';\n                    socket.emit('createTodo', title);\n                }}/>\n            </label>\n            {/* TODO一覧の表示 */}\n            <ul>\n                {todos.map(({id, title, completed}) => \n                    <li key={id}>\n                        <label style={completed ? {textDecoration: 'line-through'} : {}}>\n                        <input \n                            type=\"checkbox\"\n                            checked={completed}\n                            onChange={e => \n                                socket.emit('updateCompleted', id, e.target.checked)\n                            }\n                        />\n                            {title}\n                        <button onClick={() => socket.emit('deleteTodo', id)}>削除</button>\n                        </label>\n                    </li>\n                )}\n            </ul>\n            <div>{pageLinks}</div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}